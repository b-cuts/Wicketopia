<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

    <properties>
        <title>Wicketopia!</title>
        <author email="james@carmanconsulting.com">James Carman</author>
    </properties>

    <body>

        <!-- The body of the document contains a number of sections -->
        <section name="Scaffolding">

            <p>Wicketopia includes a &quot;Scaffold&quot; component, inspired by Groovy's scaffolding support:
            </p>
            <subsection name="Java Code...">
                <source><![CDATA[
import org.apache.wicket.spring.injection.annot.SpringBean;
import org.wicketopia.example.domain.entity.Widget;
import org.wicketopia.persistence.PersistenceProvider;
import org.wicketopia.persistence.component.scaffold.Scaffold;

public class HomePage extends WebPage
{
    @SpringBean
    private PersistenceProvider persistenceProvider;

    public HomePage()
    {
        add(new Scaffold<Widget>("scaffold", Widget.class, persistenceProvider));
    }
}]]>
                </source>
            </subsection>
            <subsection name="Markup...">
                <source><![CDATA[
<html>
  <body>
    <div wicket:id="scaffold" />
  </body>
</html>]]>
                </source>
            </subsection>
            <p>
                That's it! That's all you have to do to get a scaffolding up and running.
            </p>
        </section>

        <section name="Automatic Form Generation">
            <p>
                Most people won't want to use the scaffolding in their production applications. They can, however, use
                Wicketopia's automatically-generated forms! Here's a snippet from the scaffolding code:
            </p>
            <subsection name="Auto-Generated Editor...">
                <source><![CDATA[
Form<T> form = new Form<T>("form", model);
PropertyComponentFactory<T> editorFactory = WicketopiaPlugin.get().createEditorFactory(beanType);
Context context = new Context(Context.CREATE);
form.add(new CssBeanViewLayoutPanel<T>("layout", beanType, model, context, editorFactory));]]>
                </source>
            </subsection>
            <p>
                Here, we see the use of a &quot;layout&quot; panel. It takes a &quot;Context&quot; object which helps
                Wicketopia understand which components should be enabled, visible, required, etc. It also uses a
                &quot;PropertyComponentFactory&quot;. A PropertyComponentFactory is responsible for generating
                components for bean properties. In this case, we're using a PropertyComponentFactory which generates
                editor components. To create a &quot;viewer&quot; instead, we would simply do this:
            </p>

            <subsection name="Auto-Generated Viewer...">
                <source><![CDATA[
PropertyComponentFactory<T> viewerFactory = WicketopiaPlugin.get().createViewerFactory(beanType);
Context context = new Context(Context.VIEW);
add(new CssBeanViewLayoutPanel<T>("layout", beanType, model, context, viewerFactory));]]>
                </source>
            </subsection>
        </section>
        <section name="Manual Form Generation">
            <p>
                Sometimes the automatic form generation just won't suit your needs and you'll have to get
                &quot;down-and-dirty.&quot; However, even that's a snap with Wicketopia:
            </p>
            <subsection name="Manually-Generated Editor...">
                <source><![CDATA[
Form<T> form = new Form<T>("form", model);
PropertyComponentFactory<T> editorFactory = WicketopiaPlugin.get().createEditorFactory(beanType);
Context context = new Context(Context.CREATE);
form.add(editorFactory.createPropertyLabel("nameLabel", "name"));
form.add(editorFactory.createPropertyComponent("nameEditor", model, "name", context));
      ]]>
                </source>
            </subsection>
            <p>
                Here, we're still using a PropertyComponentFactory, but instead of using a layout component to
                automatically generate and layout our labels and components, we're using it to generate them manually.
                In this case, we're generating a label and editor component (a text field probably) for the &quot;name&quot;
                property.
            </p>
        </section>
    </body>

</document>